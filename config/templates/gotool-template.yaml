apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: gotool

spec:
  inputs:
    params:
    - name: ORGANIZATION
    - name: REPOSITORY
    - name: BRANCH
      default: master
    - name: ASSIGNEE
      default: mattmoor
    - name: TOKEN
      default: ""
    resources:
    - name: source
      type: git

  steps:
  - name: gofmt
    image: golang
    command: ["/bin/bash", "-c"]
    workingdir: "/workspace/source"
    args: ["gofmt -s -w $(find -path './vendor' -prune -o -path './third_party' -prune -o -type f -name '*.go' -print)"]

  - name: goimports
    image: github.com/mattmoor/knobots/vendor/golang.org/x/tools/cmd/goimports
    command: ["/bin/bash", "-c"]
    args:
    - |
      set -e
      set -x
      export PARENT_DIR=${GOPATH}/src/github.com/$(inputs.params.ORGANIZATION)
      if [ "$(inputs.params.REPOSITORY)" == "pkg" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "$(inputs.params.REPOSITORY)" == "sample-controller" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "$(inputs.params.REPOSITORY)" == "sample-source" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "$(inputs.params.REPOSITORY)" == "networking" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "$(inputs.params.REPOSITORY)" == "net-contour" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "$(inputs.params.REPOSITORY)" == "net-istio" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "$(inputs.params.REPOSITORY)" == "test-infra" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "$(inputs.params.REPOSITORY)" == "serving" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "$(inputs.params.REPOSITORY)" == "eventing" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "$(inputs.params.REPOSITORY)" == "eventing-contrib" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "$(inputs.params.REPOSITORY)" == "eventing-operator" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "$(inputs.params.REPOSITORY)" == "serving-operator" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      elif [ "$(inputs.params.REPOSITORY)" == "caching" ]
      then
        export PARENT_DIR=${GOPATH}/src/knative.dev
      fi
      mkdir -p ${PARENT_DIR}
      ln -s /workspace/source ${PARENT_DIR}/$(inputs.params.REPOSITORY)
      cd ${PARENT_DIR}/$(inputs.params.REPOSITORY)
      /ko-app/goimports -w $(find -name '*.go' | grep -v vendor | grep -v third_party)
    env:
    - name: GOPATH
      value: /tmp/go

  - name: open-pull-request
    image: github.com/mattmoor/knobots/cmd/pr-builder
    args:
    - "-workspace=/workspace/source"
    - "-organization=$(inputs.params.ORGANIZATION)"
    - "-repository=$(inputs.params.REPOSITORY)"
    - "-title=golang format tools"
    - "-branch=$(inputs.params.BRANCH)"
    - "-token=$(inputs.params.TOKEN)"
    - "-body"
    - |
        Produced via:
          `gofmt -s -w $(find -path './vendor' -prune -o -path './third_party' -prune -o -type f -name '*.go' -print)`
          `goimports -w $(find -name '*.go' | grep -v vendor | grep -v third_party)`
        /assign $(inputs.params.ASSIGNEE)
        /cc $(inputs.params.ASSIGNEE)

    env:
    # Inject the generated pod name so that we can use it as a
    # pseudo-random branch name (and associate open PRs with
    # build logs).
    - name: POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name

    # This mimics the runtime contract of the GithubBinding
    volumeMounts:
    - name: github-binding
      mountPath: /var/bindings/github

  volumes:
  - name: github-binding
    secret:
      secretName: github-comment-secret
